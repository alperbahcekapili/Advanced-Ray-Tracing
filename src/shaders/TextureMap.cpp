#include "TextureMap.h"
#include <cmath>
#include <cstring>  // For strcmp

TextureMap::TextureMap(){
    
}
TextureMap::~TextureMap(){
    
}
TextureMap::TextureMap(TextureImage* texture_image, bool is_image, DecalMode decal_mode, InterploationType interpolation_type){
    this->tim = texture_image;
    this->is_image = is_image;
    this->decal_mode = decal_mode;
    this->interpolation_type = interpolation_type;

}

DecalMode TextureMap::getDecalMode(const char* mode){
    if(strcmp(mode, "replace_background") == 0)
        return replace_background;
    if(strcmp(mode, "blend_kd") == 0)
        return blend_kd;
    if(strcmp(mode, "replace_ks") == 0)
        return replace_ks;
    if(strcmp(mode, "replace_kd") == 0)
        return replace_kd;
    if(strcmp(mode, "replace_background") == 0)
        return replace_background;
    if(strcmp(mode, "bump_normal") == 0)
        return bump_normal;
    if(strcmp(mode, "replace_all") == 0)
        return replace_all;
    if(strcmp(mode, "replace_normal") == 0)
        return replace_normal;
    
}


float f(float x){
    return -6*pow(x,5) + 15*pow(x,4) - 10*pow(x,3) + 1;

}


// for image-like textuers
Vec3 TextureMap::interpolateAt(uv loc, InterploationType interploation_type){
    return this->getTim()->get_value(loc.u, loc.v, interploation_type);
}


static constexpr unsigned char p[512] = {
        0x97, 0xA0, 0x89, 0x5B, 0x5A, 0x0F, 0x83, 0x0D, 0xC9, 0x5F, 0x60, 0x35, 0xC2, 0xE9, 0x07, 0xE1,
        0x8C, 0x24, 0x67, 0x1E, 0x45, 0x8E, 0x08, 0x63, 0x25, 0xF0, 0x15, 0x0A, 0x17, 0xBE, 0x06, 0x94,
        0xF7, 0x78, 0xEA, 0x4B, 0x00, 0x1A, 0xC5, 0x3E, 0x5E, 0xFC, 0xDB, 0xCB, 0x75, 0x23, 0x0B, 0x20,
        0x39, 0xB1, 0x21, 0x58, 0xED, 0x95, 0x38, 0x57, 0xAE, 0x14, 0x7D, 0x88, 0xAB, 0xA8, 0x44, 0xAF,
        0x4A, 0xA5, 0x47, 0x86, 0x8B, 0x30, 0x1B, 0xA6, 0x4D, 0x92, 0x9E, 0xE7, 0x53, 0x6F, 0xE5, 0x7A,
        0x3C, 0xD3, 0x85, 0xE6, 0xDC, 0x69, 0x5C, 0x29, 0x37, 0x2E, 0xF5, 0x28, 0xF4, 0x66, 0x8F, 0x36,
        0x41, 0x19, 0x3F, 0xA1, 0x01, 0xD8, 0x50, 0x49, 0xD1, 0x4C, 0x84, 0xBB, 0xD0, 0x59, 0x12, 0xA9,
        0xC8, 0xC4, 0x87, 0x82, 0x74, 0xBC, 0x9F, 0x56, 0xA4, 0x64, 0x6D, 0xC6, 0xAD, 0xBA, 0x03, 0x40,
        0x34, 0xD9, 0xE2, 0xFA, 0x7C, 0x7B, 0x05, 0xCA, 0x26, 0x93, 0x76, 0x7E, 0xFF, 0x52, 0x55, 0xD4,
        0xCF, 0xCE, 0x3B, 0xE3, 0x2F, 0x10, 0x3A, 0x11, 0xB6, 0xBD, 0x1C, 0x2A, 0xDF, 0xB7, 0xAA, 0xD5,
        0x77, 0xF8, 0x98, 0x02, 0x2C, 0x9A, 0xA3, 0x46, 0xDD, 0x99, 0x65, 0x9B, 0xA7, 0x2B, 0xAC, 0x09,
        0x81, 0x16, 0x27, 0xFD, 0x13, 0x62, 0x6C, 0x6E, 0x4F, 0x71, 0xE0, 0xE8, 0xB2, 0xB9, 0x70, 0x68,
        0xDA, 0xF6, 0x61, 0xE4, 0xFB, 0x22, 0xF2, 0xC1, 0xEE, 0xD2, 0x90, 0x0C, 0xBF, 0xB3, 0xA2, 0xF1,
        0x51, 0x33, 0x91, 0xEB, 0xF9, 0x0E, 0xEF, 0x6B, 0x31, 0xC0, 0xD6, 0x1F, 0xB5, 0xC7, 0x6A, 0x9D,
        0xB8, 0x54, 0xCC, 0xB0, 0x73, 0x79, 0x32, 0x2D, 0x7F, 0x04, 0x96, 0xFE, 0x8A, 0xEC, 0xCD, 0x5D,
        0xDE, 0x72, 0x43, 0x1D, 0x18, 0x48, 0xF3, 0x8D, 0x80, 0xC3, 0x4E, 0x42, 0xD7, 0x3D, 0x9C, 0xB4,

        0x97, 0xA0, 0x89, 0x5B, 0x5A, 0x0F, 0x83, 0x0D, 0xC9, 0x5F, 0x60, 0x35, 0xC2, 0xE9, 0x07, 0xE1,
        0x8C, 0x24, 0x67, 0x1E, 0x45, 0x8E, 0x08, 0x63, 0x25, 0xF0, 0x15, 0x0A, 0x17, 0xBE, 0x06, 0x94,
        0xF7, 0x78, 0xEA, 0x4B, 0x00, 0x1A, 0xC5, 0x3E, 0x5E, 0xFC, 0xDB, 0xCB, 0x75, 0x23, 0x0B, 0x20,
        0x39, 0xB1, 0x21, 0x58, 0xED, 0x95, 0x38, 0x57, 0xAE, 0x14, 0x7D, 0x88, 0xAB, 0xA8, 0x44, 0xAF,
        0x4A, 0xA5, 0x47, 0x86, 0x8B, 0x30, 0x1B, 0xA6, 0x4D, 0x92, 0x9E, 0xE7, 0x53, 0x6F, 0xE5, 0x7A,
        0x3C, 0xD3, 0x85, 0xE6, 0xDC, 0x69, 0x5C, 0x29, 0x37, 0x2E, 0xF5, 0x28, 0xF4, 0x66, 0x8F, 0x36,
        0x41, 0x19, 0x3F, 0xA1, 0x01, 0xD8, 0x50, 0x49, 0xD1, 0x4C, 0x84, 0xBB, 0xD0, 0x59, 0x12, 0xA9,
        0xC8, 0xC4, 0x87, 0x82, 0x74, 0xBC, 0x9F, 0x56, 0xA4, 0x64, 0x6D, 0xC6, 0xAD, 0xBA, 0x03, 0x40,
        0x34, 0xD9, 0xE2, 0xFA, 0x7C, 0x7B, 0x05, 0xCA, 0x26, 0x93, 0x76, 0x7E, 0xFF, 0x52, 0x55, 0xD4,
        0xCF, 0xCE, 0x3B, 0xE3, 0x2F, 0x10, 0x3A, 0x11, 0xB6, 0xBD, 0x1C, 0x2A, 0xDF, 0xB7, 0xAA, 0xD5,
        0x77, 0xF8, 0x98, 0x02, 0x2C, 0x9A, 0xA3, 0x46, 0xDD, 0x99, 0x65, 0x9B, 0xA7, 0x2B, 0xAC, 0x09,
        0x81, 0x16, 0x27, 0xFD, 0x13, 0x62, 0x6C, 0x6E, 0x4F, 0x71, 0xE0, 0xE8, 0xB2, 0xB9, 0x70, 0x68,
        0xDA, 0xF6, 0x61, 0xE4, 0xFB, 0x22, 0xF2, 0xC1, 0xEE, 0xD2, 0x90, 0x0C, 0xBF, 0xB3, 0xA2, 0xF1,
        0x51, 0x33, 0x91, 0xEB, 0xF9, 0x0E, 0xEF, 0x6B, 0x31, 0xC0, 0xD6, 0x1F, 0xB5, 0xC7, 0x6A, 0x9D,
        0xB8, 0x54, 0xCC, 0xB0, 0x73, 0x79, 0x32, 0x2D, 0x7F, 0x04, 0x96, 0xFE, 0x8A, 0xEC, 0xCD, 0x5D,
        0xDE, 0x72, 0x43, 0x1D, 0x18, 0x48, 0xF3, 0x8D, 0x80, 0xC3, 0x4E, 0x42, 0xD7, 0x3D, 0x9C, 0xB4,
    };




Vec3 getGradientVector(int i, int j, int k) {
    // Compute hash using permutation table
    int hash = p[(p[(p[i % 256] + j) % 256] + k) % 256];

    // Map the hash value to a gradient vector
    static const Vec3 gradients[] = {
        Vec3(1, 1, 0), Vec3(-1, 1, 0), Vec3(1, -1, 0), Vec3(-1, -1, 0),
        Vec3(1, 0, 1), Vec3(-1, 0, 1), Vec3(1, 0, -1), Vec3(-1, 0, -1),
        Vec3(0, 1, 1), Vec3(0, -1, 1), Vec3(0, 1, -1), Vec3(0, -1, -1)
    };

    return gradients[hash % 12]; // Use modulo to wrap around predefined gradients
}




Vec3 TextureMap::interpolateAt(Vec3 xyz){
    
    xyz = xyz * noise_scale;

    std::vector<Vec3> corners(8);
    int x0 = (int)floor(xyz.x), y0 = (int)floor(xyz.y), z0 = (int)floor(xyz.z);
    int x1 = x0 + 1, y1 = y0 + 1, z1 = z0 + 1;

    corners[0] = Vec3(x0, y0, z0);
    corners[1] = Vec3(x1, y0, z0);
    corners[2] = Vec3(x0, y1, z0);
    corners[3] = Vec3(x1, y1, z0);
    corners[4] = Vec3(x0, y0, z1);
    corners[5] = Vec3(x1, y0, z1);
    corners[6] = Vec3(x0, y1, z1);
    corners[7] = Vec3(x1, y1, z1);
    
    Vec3 resulting_normal = Vec3(0,0,0);
    for (int i = 0; i < 8; i++)
    {
        Vec3 grad_vec = getGradientVector(corners[i].x*100, corners[i].y*100, corners[i].z*100);

        Vec3 diff = xyz - corners.at(i);


        float wx = abs(diff.x) < 1  ? f(abs(diff.x)) : 0;
        float wy = abs(diff.y) < 1 ? f(abs(diff.y)) : 0;
        float wz = abs(diff.z) < 1 ? f(abs(diff.z)) : 0;
        
        float w = wx*wy*wz;
        float contrib  = diff.dot(grad_vec);

        
        resulting_normal = resulting_normal + Vec3(contrib * w, contrib * w, contrib * w);
    }
    if(this->noise_conv_type == absval)
        return Vec3(abs(resulting_normal.x), abs(resulting_normal.y), abs(resulting_normal.z));
    return (resulting_normal + Vec3(1,1,1)) / 2;
}




TextureImage* TextureMap::getTim(){
    return this->tim;
}
InterploationType TextureMap::getInterpolationType(const char* mode){
    if(strcmp(mode, "bilinear") == 0)
        return BILINEAR;
    if(strcmp(mode, "nearest") == 0)
        return NEAREAST_NEIGHBOR;
}

NoiseConversionType TextureMap::getNoiseConversionType(const char* mode){
    if(strcmp(mode, "linear") == 0)
        return linear;
    if(strcmp(mode, "absval") == 0)
        return absval;
}